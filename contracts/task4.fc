;; #include "imports/stdlib.fc";

() recv_internal(int my_balance, int msg_value, cell in_msg_full, slice in_msg_body) impure {

}

;; 2 <= N <= 31 & 2 <= M <= 31
;; 
;;             min (X)       min (Q)   min (L)
;; sort by: (X to break, ? on the way, length)
;; dfs with memo: memo[i][j] = (X, Q, L, step back): best result to reach (i, j)


;; global cell memo;  ;; {flatten ind: (X, Q, L, sb)} flatten_ind: 10bit; X,Q,L,sb: 10bit each one

int to_flatten(int i, int j, int m) inline {
    return m * i + j;
}

(int, int) from_flatten(int x, int m) inline {
    int r = x / m;
    return (r, x - r * m);
}

int to_key(int x, int q, int l, int pos) inline {
    return (x << 30) | (q << 20) | (l << 10) | pos;
}

(int, int, int, int) from_key(int key) inline {
    int pos = key & ((1 << 10) - 1);
    key >>= 10; 
    int bl = key & ((1 << 10) - 1);
    key >>= 10;
    int bq = key & ((1 << 10) - 1);
    key >>= 10;
    int bx = key;
    return (bx, bq, bl, pos);
}

;; S = 83
;; X = 88
;; . = 46
;; E = 69
;; ? = 63
;; ! = 33

() dump_str (slice str) impure asm "STRDUMP" "DROP";

forall X -> (tuple) to_tuple (X x) asm "NOP";
forall X -> int is_null?(X x) asm "ISNULL";
(cell, (int, slice, int)) ~udict::delete_get_min::custom(cell dict, int key_len) asm(-> 0 2 1 3) "DICTUREMMIN";

;; X    Q    L   maze
(int, int, int, tuple) solve(int n, int m, tuple maze) method_id {
    (int si, int sj) = (0, 0);
    (int ei, int ej) = (0, 0);
    int i = 0;
    repeat (n) {
        int j = 0;
        repeat (m) {
            int char = maze.at(i).at(j);
            if (char == 83) {
                (si, sj) = (i, j);
            } elseif (char == 69) {
                (ei, ej) = (i, j);
            }
            j += 1;
        }
        i += 1;
    }
    tuple d = to_tuple([

        to_tuple([-1, -1]),
        to_tuple([-1,  0]),
        to_tuple([-1,  1]),

        to_tuple([ 0, -1]),
        to_tuple([ 0,  1]),

        to_tuple([ 1, -1]),
        to_tuple([ 1,  0]),
        to_tuple([ 1,  1])
    ]);
    int flatten_end = to_flatten(ei, ej, m);
    int key_len = 10;
    cell memo = new_dict();
    cell queue = new_dict();
    builder emptyb = begin_cell();
    queue~udict_set_builder(40, to_key(0,0,0,to_flatten(si,sj,m)), emptyb);

    int f = 0;
    memo~udict_set_builder(key_len, to_flatten(si, sj, m), begin_cell().store_uint(0, key_len).store_uint(0, key_len).store_uint(0, key_len).store_uint(0, key_len));
    do {
        (int key, slice cs, int f) = queue~udict::delete_get_min::custom(40);
        ;; int nxt_pos = cs~load_uint(10);
        (int X, int Q, int L, int nxt_pos) = from_key(key);

        (int i, int j) = from_flatten(nxt_pos, m);
        ;; dump_str("nxt (i, j):");
        ;; i~dump(); j~dump();

        (int nX, int nQ, int nL) = (X, Q, L);
        int dit = 0;
        repeat (8) {
            tuple dd = d.at(dit);
            (int dx, int dy) = (dd.at(0), dd.at(1));

            dx += i;
            dy += j;
            if ((dx >= 0) & (dx < n) & (dy >= 0) & (dy < m)) {
                int char = maze.at(dx).at(dy);
                (X, Q, L) = (nX, nQ, nL);
                if (char == 88) { X += 1; } elseif (char == 63) { Q += 1; } L += 1;
                int flatten_pos = to_flatten(dx, dy, m);
                int new_key = to_key(X, Q, L, flatten_pos);
                (slice cs, int f) = memo.udict_get?(key_len, flatten_pos);
                if (~ f) {
                    ;; dump_str("set to memo/queue nxt (dx, dy):");
                    ;; dx~dump(); dy~dump();  new_key~dump();
                    memo~udict_set_builder(key_len, flatten_pos, begin_cell().store_uint(X, key_len).store_uint(Q, key_len).store_uint(L, key_len).store_uint(nxt_pos, key_len));
                    queue~udict_set_builder(40, new_key, emptyb);
                } else {
                    (int xX, int qQ, int lL) = (cs~load_uint(key_len), cs~load_uint(key_len), cs~load_uint(key_len));
                    int old_key = to_key(xX, qQ, lL, flatten_pos);
                    if (new_key < old_key) {
                        ;; dump_str("update memo/queue nxt (dx, dy):");
                        ;; dx~dump(); dy~dump(); new_key~dump();

                        memo~udict_set_builder(key_len, flatten_pos, begin_cell().store_uint(X, key_len).store_uint(Q, key_len).store_uint(L, key_len).store_uint(nxt_pos, key_len));
                        queue~udict_set_builder(40, new_key, emptyb);
                    }
                }
            }
            dit += 1;
        }
    } until (is_null?(queue));

    (slice cs, int f) = memo.udict_get?(key_len, flatten_end);
    (int X, int Q, int L, int sb) = (cs~load_uint(key_len), cs~load_uint(key_len), cs~load_uint(key_len), cs~load_uint(key_len));

    cell cells_to_mark = new_dict();
    repeat (L - 1) {
        cells_to_mark~udict_set_builder(key_len, sb, emptyb);
        (cs, _) = memo.udict_get?(key_len, sb);
        cs~skip_bits(key_len * 3);
        sb = cs~load_uint(key_len);
    }

    tuple new_maze = empty_tuple();
    int i = 0;
    repeat (n) {
        int j = 0;
        tuple row = empty_tuple();
        repeat (m) {
            (_, int f) = cells_to_mark.udict_get?(key_len, to_flatten(i, j, m));
            if (f) {
                row~tpush(33);
                ;; int x = 33;
                ;; x~dump();
            } else {
                row~tpush(maze.at(i).at(j));
                ;; int x = maze.at(i).at(j);
                ;; x~dump();
            }
            j += 1;
        }
        ;; dump_str("----");
        new_maze~tpush(row);
        i += 1;
    }

    ;; X~dump();
    ;; Q~dump();
    ;; L~dump();
    return (X, Q, L, new_maze);
}
