;; #include "imports/stdlib.fc";

;; forall X -> int is_null?(X x) asm "ISNULL";
;; int equal_slices(slice a, slice b) impure asm "SDEQ";
;; () dump_str (slice str) impure asm "STRDUMP" "DROP";

() recv_internal(int my_balance, int msg_value, cell in_msg_full, slice in_msg_body) impure {

    if (in_msg_body.slice_empty?()) {
        return ();
    }

    int op = in_msg_body~load_uint(32);
    if (op == 0x368ddef3) {  ;; ADD
        slice cs = get_data().begin_parse();
        slice admin = cs~load_msg_addr();

        slice cs2 = in_msg_full.begin_parse();
        cs2~skip_bits(4);
        slice sender = cs2~load_msg_addr();

        throw_unless(120, equal_slices(admin, sender));

        cell users = cs.preload_dict();

        in_msg_body~skip_bits(64);
        slice user_addr = in_msg_body~load_msg_addr();
        int share = in_msg_body.preload_uint(32);
        (_, int user_id) = parse_std_addr(user_addr);

        users~udict_set_builder(256, user_id, begin_cell().store_uint(share, 32));
        set_data(
            begin_cell()
                .store_slice(admin)
                .store_dict(users)
            .end_cell()
        );
        return ();
    }
    if (op == 0x278205c8) {  ;; REMOVE
        slice cs = get_data().begin_parse();
        slice admin = cs~load_msg_addr();

        slice cs2 = in_msg_full.begin_parse();
        cs2~skip_bits(4);
        slice sender = cs2~load_msg_addr();

        throw_unless(120, equal_slices(admin, sender));

        cell users = cs.preload_dict();

        in_msg_body~skip_bits(64);
        slice user_addr = in_msg_body~load_msg_addr();
        (_, int user_id) = parse_std_addr(user_addr);

        (slice cs, int f) = users~udict_delete_get?(256, user_id);
        throw_unless(121, f);
        set_data(
            begin_cell()
                .store_slice(admin)
                .store_dict(users)
            .end_cell()
        );
        return ();
    }
    if (op == 0x068530b3) {  ;; SPLIT TON
        var cs = get_data().begin_parse();
        slice admin = cs~load_msg_addr();
        cell users = cs.preload_dict();

        throw_if(122, dict_empty?(users));

        int total_share = 0;
        int key = -1;
        do {
            (key, slice cs, int f) = users.udict_get_next?(256, key);
            if (f) {
                total_share += cs.preload_uint(32);
            }
        } until (~ f);

        builder prebuild = begin_cell()
            .store_uint(0x18, 6)
            .store_uint(4, 3).store_int(0, 8);
        int key = -1;
        do {
            (key, slice cs, int f) = users.udict_get_next?(256, key);
            if (f) {
                int share = cs.preload_uint(32);
                send_raw_message(prebuild
                    .store_uint(key, 256)
                    .store_coins(muldiv(share, msg_value, total_share))
                    .store_uint(0, 1 + 4 + 4 + 64 + 32 + 1 + 1)
                .end_cell(), 1);
            }
        } until (~ f);
        commit();  ;; cuz no need
        throw(0);  ;; to update storage
        ;; return ();
    }
    if (op == 0x7362d09c) {  ;; JETTON TRANSFER
        var cs = get_data().begin_parse();
        slice admin = cs~load_msg_addr();
        cell users = cs.preload_dict();

        throw_if(122, dict_empty?(users));

        int total_share = 0;
        int key = -1;
        do {
            (key, slice cs, int f) = users.udict_get_next?(256, key);
            if (f) {
                total_share += cs.preload_uint(32);
            }
        } until (~ f);

        cs = in_msg_full.begin_parse().skip_bits(4);
        slice sender = cs~load_msg_addr();
        int query_id = in_msg_body~load_uint(64);
        int amount = in_msg_body~load_coins();

        builder prebuild = begin_cell()
            .store_uint(0x18, 6)
            .store_slice(sender)
            .store_coins(20000000)
            .store_uint(1, 1 + 4 + 4 + 64 + 32 + 1 + 1);
        int key = -1;
        do {
            (key, slice cs, int f) = users.udict_get_next?(256, key);
            if (f) {
                int share = cs.preload_uint(32);
                send_raw_message(prebuild
                    .store_ref(
                        begin_cell()
                            .store_uint(0x0f8a7ea5, 32)
                            .store_uint(query_id, 64)
                            .store_coins(muldiv(share, amount, total_share))
                            .store_uint(4, 3).store_int(0, 8).store_uint(key, 256)
                            .store_uint(4, 3).store_int(0, 8).store_uint(key, 256)
                            .store_uint(0, 1)
                            .store_coins(1)
                            .store_uint(0, 1)
                        .end_cell()
                    )
                .end_cell(), 1);
            }
        } until (~ f);
        commit();
        throw(0);
        ;; return ();
    }
}

cell get_users() method_id {
    var data = get_data().begin_parse().skip_bits(267);
    return data.preload_dict();
}

int get_user_share(slice user_address) method_id {
    var data = get_data().begin_parse().skip_bits(267);
    cell users = data.preload_dict();
    (int wc, int addr) = parse_std_addr(user_address);
    (slice cs, _) = users.udict_get?(256, addr);
    return cs.preload_uint(32);
}
